
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 03 20:48:56 PDT 2015
//----------------------------------------------------

package net.alloyggp.griddle.generated;

import java_cup.Lexer;
import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import net.alloyggp.griddle.grammar.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 03 20:48:56 PDT 2015
  */
public class GdlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GdlParser() {super();}

  /** Constructor which sets the default scanner. */
  public GdlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GdlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\007" +
    "\000\002\005\003\000\002\005\006\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\006\000\002" +
    "\007\007\000\002\007\006\000\002\010\004\000\002\010" +
    "\002\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\010\002\uffff\005\uffff\012\uffff\001\002\000" +
    "\010\002\012\005\006\012\005\001\002\000\012\002\ufffb" +
    "\005\ufffb\006\ufffb\012\ufffb\001\002\000\006\004\013\012" +
    "\014\001\002\000\010\002\001\005\001\012\001\001\002" +
    "\000\010\002\ufffd\005\ufffd\012\ufffd\001\002\000\010\002" +
    "\ufffe\005\ufffe\012\ufffe\001\002\000\004\002\000\001\002" +
    "\000\006\005\027\012\005\001\002\000\012\005\ufff2\006" +
    "\ufff2\012\ufff2\013\ufff2\001\002\000\012\005\021\006\022" +
    "\012\017\013\023\001\002\000\012\005\uffef\006\uffef\012" +
    "\uffef\013\uffef\001\002\000\012\005\ufff1\006\ufff1\012\ufff1" +
    "\013\ufff1\001\002\000\012\005\ufff3\006\ufff3\012\ufff3\013" +
    "\ufff3\001\002\000\004\012\024\001\002\000\012\002\ufffa" +
    "\005\ufffa\006\ufffa\012\ufffa\001\002\000\012\005\ufff0\006" +
    "\ufff0\012\ufff0\013\ufff0\001\002\000\012\005\ufff2\006\ufff2" +
    "\012\ufff2\013\ufff2\001\002\000\012\005\021\006\026\012" +
    "\017\013\023\001\002\000\012\005\uffee\006\uffee\012\uffee" +
    "\013\uffee\001\002\000\004\012\014\001\002\000\010\005" +
    "\ufff8\006\ufff8\012\ufff8\001\002\000\010\005\032\006\035" +
    "\012\005\001\002\000\012\007\036\010\040\011\037\012" +
    "\014\001\002\000\010\005\ufff9\006\ufff9\012\ufff9\001\002" +
    "\000\010\005\ufff7\006\ufff7\012\ufff7\001\002\000\010\002" +
    "\ufffc\005\ufffc\012\ufffc\001\002\000\010\005\021\012\017" +
    "\013\023\001\002\000\006\005\032\012\005\001\002\000" +
    "\010\005\ufff8\006\ufff8\012\ufff8\001\002\000\010\005\032" +
    "\006\042\012\005\001\002\000\010\005\ufff4\006\ufff4\012" +
    "\ufff4\001\002\000\004\006\044\001\002\000\010\005\ufff6" +
    "\006\ufff6\012\ufff6\001\002\000\010\005\021\012\017\013" +
    "\023\001\002\000\004\006\047\001\002\000\010\005\ufff5" +
    "\006\ufff5\012\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\004\002\003\001\001\000\010\003\006\004" +
    "\010\005\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\027\001\001\000\004\010\014" +
    "\001\001\000\006\011\017\012\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\024\001" +
    "\001\000\006\011\017\012\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\030\001\001\000\006\005" +
    "\033\007\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\044\012" +
    "\015\001\001\000\006\005\033\007\042\001\001\000\004" +
    "\006\040\001\001\000\006\005\033\007\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\045\012\015\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GdlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GdlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GdlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    Lexer lexer;

    public GdlParser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex, sf);
        lexer = lex;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GdlParser$actions {
  private final GdlParser parser;

  /** Constructor */
  CUP$GdlParser$actions(GdlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GdlParser$do_action(
    int                        CUP$GdlParser$act_num,
    java_cup.runtime.lr_parser CUP$GdlParser$parser,
    java.util.Stack            CUP$GdlParser$stack,
    int                        CUP$GdlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GdlParser$result;

      /* select the action based on the action number */
      switch (CUP$GdlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= POPEN CONSTANT termlist PCLOSE 
            {
              Function RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<Term> ts = (List<Term>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Function.create(c, ts, plleft, prright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("function",8, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= function 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Term.createFunction(f, fleft, fright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= VARIABLE 
            {
              Term RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Term.createVariable(v, vleft, vright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= CONSTANT 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Term.createConstant(c, cleft, cright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // termlist ::= 
            {
              List<Term> RESULT =null;
		 RESULT = new LinkedList<Term>(); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("termlist",6, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // termlist ::= termlist term 
            {
              List<Term> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<Term> ts = (List<Term>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 ts.add(t); RESULT = ts; 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("termlist",6, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal ::= POPEN OR literallist PCLOSE 
            {
              Literal RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<Literal> ls = (List<Literal>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Literal.createOr(ls, plleft, prright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal ::= POPEN DISTINCT term term PCLOSE 
            {
              Literal RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Literal.createDistinct(t1, t2, plleft, prright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literal ::= POPEN NOT literal PCLOSE 
            {
              Literal RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Literal.createNot(l, plleft, prright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literal ::= sentence 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Literal.createSentence(s, sleft, sright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literallist ::= 
            {
              List<Literal> RESULT =null;
		 RESULT = new LinkedList<Literal>(); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("literallist",4, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literallist ::= literallist literal 
            {
              List<Literal> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<Literal> ls = (List<Literal>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 ls.add(l); RESULT = ls; 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("literallist",4, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= POPEN CONSTANT termlist PCLOSE 
            {
              Sentence RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<Term> ts = (List<Term>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Sentence.create(c, ts, plleft, prright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-3)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= CONSTANT 
            {
              Sentence RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Sentence.create(c, cleft, cright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // rule ::= POPEN IMPLIES sentence literallist PCLOSE 
            {
              Rule RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).right;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<Literal> ls = (List<Literal>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = Rule.create(s, ls, plleft, prright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("rule",2, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-4)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // toplevel ::= sentence 
            {
              TopLevelGdl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = TopLevelGdl.create(s, sleft, sright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("toplevel",1, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // toplevel ::= rule 
            {
              TopLevelGdl RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		Rule r = (Rule)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 RESULT = TopLevelGdl.create(r, rleft, rright); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("toplevel",1, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // game ::= 
            {
              List<TopLevelGdl> RESULT =null;
		 RESULT = new LinkedList<TopLevelGdl>(); 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("game",0, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= game EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<TopLevelGdl> start_val = (List<TopLevelGdl>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		RESULT = start_val;
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GdlParser$parser.done_parsing();
          return CUP$GdlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // game ::= game toplevel 
            {
              List<TopLevelGdl> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).right;
		List<TopLevelGdl> g = (List<TopLevelGdl>)((java_cup.runtime.Symbol) CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()).right;
		TopLevelGdl tl = (TopLevelGdl)((java_cup.runtime.Symbol) CUP$GdlParser$stack.peek()).value;
		 g.add(tl); RESULT = g; 
              CUP$GdlParser$result = parser.getSymbolFactory().newSymbol("game",0, ((java_cup.runtime.Symbol)CUP$GdlParser$stack.elementAt(CUP$GdlParser$top-1)), ((java_cup.runtime.Symbol)CUP$GdlParser$stack.peek()), RESULT);
            }
          return CUP$GdlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

